import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * This class contains solutions for Question 5 a.
 */
public class HMMTagger
{
    /**
     * Define a set of integers to represent tags.
     */
    static final int STAR  = 0;
    static final int IPER  = 1;
    static final int IORG  = 2;
    static final int ILOC  = 3;
    static final int IMISC = 4;
    static final int BPER  = 5;
    static final int BORG  = 6;
    static final int BLOC  = 7;
    static final int BMISC = 8;
    static final int O     = 9;
    static final int STOP  = 10;
    /**
     * Define a set of hash tables to convert the
     * tag integer representation to string representation.
     */
    HashMap<String, Integer> h;
    HashMap<Integer, String> g;

    public HMMTagger()
    {
        h = new HashMap<String, Integer>();
        h.put("*", STAR);
        h.put("I-PER", IPER);
        h.put("I-ORG", IORG);
        h.put("I-LOC", ILOC);
        h.put("I-MISC", IMISC);
        h.put("B-PER", BPER);
        h.put("B-ORG", BORG);
        h.put("B-LOC", BLOC);
        h.put("B-MISC", BMISC);
        h.put("O", O);
        h.put("STOP", STOP);
        g = new HashMap<Integer, String>();
        g.put(STAR, "*");
        g.put(IPER, "I-PER");
        g.put(IORG, "I-ORG");
        g.put(ILOC, "I-LOC");
        g.put(IMISC, "I-MISC");
        g.put(BPER, "B-PER");
        g.put(BORG, "B-ORG");
        g.put(BLOC, "B-LOC");
        g.put(BMISC, "B-MISC");
        g.put(O, "O");
        g.put(STOP, "STOP");
    }

    /**
     * Question 5 a 1
     * Compute transition probability for trigrams.
     * @param fn File name of the file that contains counts generated
     *           by count_freq.py.
     * @return A three-dimensional array contains the trigram transition
     *         probability.
     */
    public double[][][] compTranProb(String fn)
    {
        int[]          c1gram = new int[11];
        int[][]        c2gram = new int[11][11];
        int[][][]      c3gram = new int[11][11][11];
        double[][][] tranProb = new double[11][11][11];
        // read in training data
        BufferedReader bfReader;
        try
        {
            bfReader = new BufferedReader(new FileReader(fn));
            for (String line = bfReader.readLine(); line != null; line = bfReader.readLine())
            {
                String[] entry;
                if(!(line.equals("") || (entry = line.split("\\s+"))[1].equals("WORDTAG")))
                    if(entry[1].charAt(0) == '1') // 1-gram
                        c1gram[h.get(entry[2])] = Integer.parseInt(entry[0]);
                    else if(entry[1].charAt(0) == '2') // 2-gram
                        c2gram[h.get(entry[2])][h.get(entry[3])] = Integer.parseInt(entry[0]);
                    else if(entry[1].charAt(0) == '3') // 3-gram
                        c3gram[h.get(entry[2])][h.get(entry[3])][h.get(entry[4])] = Integer.parseInt(entry[0]);
            }
            bfReader.close();
        } catch (IOException e) { e.printStackTrace(); }
        // calculate transitional probability for the trigram
        for(int i = STAR; i <= STOP; i++)
            for(int j = STAR; j <= STOP; j++)
                for(int k = IPER; k <= STOP; k++)
                    if(c2gram[i][j] != 0)
                        tranProb[i][j][k] = ((double) c3gram[i][j][k])/((double) c2gram[i][j]);
        System.out.println("compTranProb success");
        return tranProb;
    }

    /**
     * Question 5 a
     * Generate the file of a list of all possible trigram tags. Not all of them make sense.
     * Used for testing compTranProb.
     */
    public void trigramGen()
    {
        PrintWriter writer = null;
        try
        {
            writer = new PrintWriter("trigramTags", "UTF-8");
            for(int i = STAR; i <= STOP; i++)
                for(int j = STAR; j <= STOP; j++)
                    for(int k = STAR; k <= STOP; k++)
                        writer.println(g.get(i)+" "+g.get(j)+" "+g.get(k));
            writer.close();
        } catch (FileNotFoundException e) { e.printStackTrace(); }
        catch (UnsupportedEncodingException e) { e.printStackTrace(); }
        System.out.println("trigramGen success");
    }

    /**
     * Question 5 a
     * Take a counts file (ner.counts, ner.rare.counts, or ner.pseudo_word.counts) and a file
     * with trigrams to be processed, then outputs a file named trigramTagsLogProb that contains
     * the trigrams and log probability.
     * @param trainFn A counts file, ner.counts, ner.rare.counts, or ner.pseudo_word.counts
     * @param tagsFn  File with trigrams, can be generated by trigramGen (output file named trigramTags).
     */
    public void appendProb(String trainFn, String tagsFn)
    {
        double[][][] tranProb = this.compTranProb(trainFn);
        // read in training data
        BufferedReader bfReader;
        ArrayList<String> lines = new ArrayList<String>();
        try
        {
            bfReader = new BufferedReader(new FileReader(tagsFn));
            for (String line = bfReader.readLine(); line != null; line = bfReader.readLine())
            {
                String[] entry = line.split("\\s+");
                lines.add(line+" "+(Math.log(tranProb[h.get(entry[0])][h.get(entry[1])][h.get(entry[2])])/Math.log(2)));
            }
            bfReader.close();
        } catch (IOException e) { e.printStackTrace(); }
        // write back to a new file
        PrintWriter writer = null;
        try
        {
            writer = new PrintWriter("trigramTagsLogProb", "UTF-8");
            for(String line: lines)
                writer.println(line);
            writer.close();
        } catch (FileNotFoundException e) { e.printStackTrace(); }
        catch (UnsupportedEncodingException e) { e.printStackTrace(); }
        System.out.println("appendProb success");
    }

    /**
     * This main method includes tests you can run.
     * @param args
     */
    public static void main(String[] args)
    {
        HMMTagger tagger = new HMMTagger();

        /** Test for TA on CLIC machines **/
        /** Run trigramGen to generate trigrams, the output file is named trigramTags **/
//        tagger.trigramGen();
        /** Next, test appendProb with different counts file, ONE AT A TIME **/
//        tagger.appendProb("./ner.counts" ,"trigramTags");

//        tagger.appendProb("./ner.rare.counts" ,"trigramTags");

//        tagger.appendProb("./ner.pseudo_word.counts" ,"trigramTags");
    }
}
